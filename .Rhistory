round(qnorm(.05, mean = 100, sd = 10, lower.tail = FALSE), 3)
round(qnorm(.95, mean = 100, sd = 10), 3)
pbinom(6,size=6, prob=.05)
dbinom(6,size=6, prob=.05)
?dbinom
pdbinom(2,size=6,prob=.05)
pbinom(2,size=6,prob=.05)
round(pbinom(4, prob = .5, size = 6, lower.tail = FALSE)
)
round(pbinom(4, prob = .5, size = 6, lower.tail = FALSE))
round(pbinom(4, prob = .5, size = 6,))
round(pbinom(5, prob = .5, size = 6, lower.tail = FALSE))
round(pbinom(5, prob = .5, size = 6, lower.tail = FALSE)*100 + 1)
round(pbinom(5, prob = .5, size = 6, lower.tail = FALSE)*100, 1)
round(pbinom(4, prob = .5, size = 6, lower.tail = FALSE)*100, 1)
round(pnorm(.51,mean=.50,sd=.288,lower.tail = FALSE)*100,1)
round(pnorm(.51,mean=.50,sd=.2886,lower.tail = FALSE)*100,3)
round(pnorm(.51, mean = 0.5, sd = sqrt(1 / 12 / 100), lower.tail = FALSE), 3)
mean((1 : 6 - 3.5)^2 / 10)
(1:6)
1:6-3.5)
1:6-3.5
pppois(2, lambda=20)
ppois(2, lambda=20)
round(ppois(20, lambda = 16.5 * 2) * 100, 1)
ppois
?ppois
install.packages("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
sample(1:30)
sample(1:30,3)
sample(1:30,3)
sample(1:30,3)
sample(1:30,3)
sample(1:30,3)
sample(1:30,3)
sample(1:30,3)
sample(1:30,3)
sample(1:30,3)
sample(1:30,3)
sample(1:30,3)
swirl()
1
11/12
deck
1/52
52
4
4/52
0
3/13
11/13
11/12
10/12
12/13
3/4
2/3
2/51
6.4
.64
.64
mypdf
mypdf(0:1.6)
mypdf(1.6)
?integrate
integrate(mypdf,0,1.6)
1.414214
---
title: "PA1_StatisticalInference"
author: "Rafael Mendez"
date: "August 19, 2015"
output: pdf_document
---
Purpose:
In this project you will investigate the exponential distribution in R and compare it with the Central Limit Theorem. The exponential distribution can be simulated in R with rexp(n, lambda) where lambda is the rate parameter. The mean of exponential distribution is 1/lambda and the standard deviation is also 1/lambda. Set lambda = 0.2 for all of the simulations. You will investigate the distribution of averages of 40 exponentials. Note that you will need to do a thousand simulations.
Illustrate via simulation and associated explanatory text the properties of the distribution of the mean of 40 exponentials.
```{r}
opts_chunk$set(echo = TRUE, results = 'hold')
```
#1. Show the sample mean and compare it to the theoretical (expected) mean of the distribution.
##CREATE SIMULATION WITH 40 SAMPLES AND 1000 NUM OF SIMULATIONS
```{r}
#Set the constants
set.seed(2) # Make simulation reproducible
lambda <- 0.2  # set for rex, the rate parameter
samples <- 40 #number of exponetials being distributed
sim <- 1000 # number of tests
sample_mean <- NULL
for (i in 1:sim) sample_mean <- c(sample_mean, mean(rexp(samples, lambda))) #sample
#Where exponential dist is simulated with rexp(n,lambda) the rate parameter
#HISTO THE SAMPLE MEAN TO SHOW THAT ITS A NORMAL DIST LIKE THE EXAMPLE
hist(sample_mean, freq=FALSE)
```
##Compare Sample Mean vs Theoritical Mean
##Sample Mean
```{r}
mean_of_means<- round(mean(sample_mean))
```
##Theoretical Mean - expected mean mu of expoential distribution rate lambda given = .20
```{r}
mu <- 1/lambda
mu
```
results: The sample mean and expected mean are closely related.
#2. Show how variable the sample is (via variance) and compare it to the theoretical variance of the distribution.
##Compare Sample Variance vs Theoretical Variance
##Sample Variance
```{r}
#var() function to get sample variance
variance_sample<-var(sample_mean)
variance_sample
```
##Expected Standard Deviation of a exponential distribution of rate parameter lambda
variance = sd ^ 2
```{r}
sd <- 1/lambda/sqrt(samples)
sd
```
##Theoretical Variance of Distribution
```{r}
variance_theoretical<- sd^2
variance_theoretical
```
#3. Show that the distribution is approximately normal.
```{r echo=FALSE}
h <- hist(sample_mean, breaks=30)
xfit <- seq(min(sample_mean), max(sample_mean), length = 40)
yfit <- dnorm(xfit, mean = mean(sample_mean), sd = sd(sample_mean))
yfit <- yfit  * diff(h$mids[1:2]) * length(sample_mean)
lines(xfit, yfit, lwd=3)
```
help(hist)
variance_sample
variance_theoretical
```{r echo=FALSE}
#Note that histograms are strongly affected by the number of bins used
h <- hist(sample_mean, breaks=10, col = "blue")
#Add a normal curve
xfit <- seq(min(sample_mean), max(sample_mean), length = 40) #dictates
yfit <- dnorm(xfit, mean = mean(sample_mean), sd = sd(sample_mean))
yfit <- yfit  * diff(h$mids[1:2]) * length(sample_mean)
lines(xfit, yfit, lwd=3)
```
```{r echo=FALSE}
#Note that histograms are strongly affected by the number of bins used
h <- hist(sample_mean, breaks=10, col = "red")
#Add a normal curve
xfit <- seq(min(sample_mean), max(sample_mean), length = 40) #dictates
yfit <- dnorm(xfit, mean = mean(sample_mean), sd = sd(sample_mean))
yfit <- yfit  * diff(h$mids[1:2]) * length(sample_mean)
lines(xfit, yfit, lwd=3)
```
```{r echo=FALSE}
#Note that histograms are strongly affected by the number of bins used
h <- hist(sample_mean, breaks=3, col = "red")
#Add a normal curve
xfit <- seq(min(sample_mean), max(sample_mean), length = 40) #dictates
yfit <- dnorm(xfit, mean = mean(sample_mean), sd = sd(sample_mean))
yfit <- yfit  * diff(h$mids[1:2]) * length(sample_mean)
lines(xfit, yfit, lwd=3)
#Note that histograms are strongly affected by the number of bins used
h <- hist(sample_mean, breaks=3, col = "red")
#Add a normal curve
xfit <- seq(min(sample_mean), max(sample_mean), length = 40) #dictates
yfit <- dnorm(xfit, mean = mean(sample_mean), sd = sd(sample_mean))
yfit <- yfit  * diff(h$mids[1:2]) * length(sample_mean)
lines(xfit, yfit, lwd=3)
```
```{r echo=FALSE}
#Note that histograms are strongly affected by the number of bins used
h <- hist(sample_mean, breaks=12, col = "red")
#Add a normal curve
xfit <- seq(min(sample_mean), max(sample_mean), length = 40) #dictates
yfit <- dnorm(xfit, mean = mean(sample_mean), sd = sd(sample_mean))
yfit <- yfit  * diff(h$mids[1:2]) * length(sample_mean)
lines(xfit, yfit, lwd=3)
```
```{r echo=FALSE}
#Note that histograms are strongly affected by the number of bins used
h <- hist(sample_mean, breaks=9, col = "red")
#Add a normal curve
xfit <- seq(min(sample_mean), max(sample_mean), length = 40) #dictates
yfit <- dnorm(xfit, mean = mean(sample_mean), sd = sd(sample_mean))
yfit <- yfit  * diff(h$mids[1:2]) * length(sample_mean)
lines(xfit, yfit, lwd=3)
```
```{r echo=FALSE}
#Note that histograms are strongly affected by the number of bins used
h <- hist(sample_mean, breaks=5, col = "red")
#Add a normal curve
xfit <- seq(min(sample_mean), max(sample_mean), length = 40) #dictates
yfit <- dnorm(xfit, mean = mean(sample_mean), sd = sd(sample_mean))
yfit <- yfit  * diff(h$mids[1:2]) * length(sample_mean)
lines(xfit, yfit, lwd=3)
```
```{r echo=FALSE}
#Note that histograms are strongly affected by the number of bins used
h <- hist(sample_mean, breaks=20, col = "red")
#Add a normal curve
xfit <- seq(min(sample_mean), max(sample_mean), length = 40) #dictates
yfit <- dnorm(xfit, mean = mean(sample_mean), sd = sd(sample_mean))
yfit <- yfit  * diff(h$mids[1:2]) * length(sample_mean)
lines(xfit, yfit, lwd=3)
```
#Note that histograms are strongly affected by the number of bins used
h <- hist(sample_mean, breaks=40, col = "red")
#Add a normal curve
xfit <- seq(min(sample_mean), max(sample_mean), length = 40) #dictates
yfit <- dnorm(xfit, mean = mean(sample_mean), sd = sd(sample_mean))
yfit <- yfit  * diff(h$mids[1:2]) * length(sample_mean)
lines(xfit, yfit, lwd=3)
```
```{r echo=FALSE}
#Note that histograms are strongly affected by the number of bins used
normal_curve_hist <- hist(sample_mean, breaks=30, col = "red")
#Add a normal curve
xfit <- seq(min(sample_mean), max(sample_mean), length = 40) #dictates
yfit <- dnorm(xfit, mean = mean(sample_mean), sd = sd(sample_mean))
yfit <- yfit  * diff(h$mids[1:2]) * length(sample_mean)
lines(xfit, yfit, lwd=3)
```
```{r echo=FALSE}
#Note that histograms are strongly affected by the number of bins used
normal_curve_hist <- hist(sample_mean, breaks=25, col = "red")
#Add a normal curve
xfit <- seq(min(sample_mean), max(sample_mean), length = 40) #dictates
yfit <- dnorm(xfit, mean = mean(sample_mean), sd = sd(sample_mean))
yfit <- yfit  * diff(h$mids[1:2]) * length(sample_mean)
lines(xfit, yfit, lwd=3)
```
```{r echo=FALSE}
#Note that histograms are strongly affected by the number of bins used
normal_curve_hist <- hist(sample_mean, breaks=25, col = "red")
#Add a normal curve
xfit <- seq(min(sample_mean), max(sample_mean), length = 40) #dictates
yfit <- dnorm(xfit, mean = mean(sample_mean), sd = sd(sample_mean))
yfit <- yfit  * diff(h$mids[1:2]) * length(sample_mean)
lines(xfit, yfit, lwd=3)
```
```{r echo=FALSE}
#Note that histograms are strongly affected by the number of bins used
normal_curve_hist <- hist(sample_mean, breaks=30, col = "red")
#Add a normal curve
xfit <- seq(min(sample_mean), max(sample_mean), length = 40) #dictates
yfit <- dnorm(xfit, mean = mean(sample_mean), sd = sd(sample_mean))
yfit <- yfit  * diff(h$mids[1:2]) * length(sample_mean)
lines(xfit, yfit, lwd=3)
```
---
title: "PA1_StatisticalInference"
author: "Rafael Mendez"
date: "August 19, 2015"
output: pdf_document
---
Purpose:
In this project you will investigate the exponential distribution in R and compare it with the Central Limit Theorem. The exponential distribution can be simulated in R with rexp(n, lambda) where lambda is the rate parameter. The mean of exponential distribution is 1/lambda and the standard deviation is also 1/lambda. Set lambda = 0.2 for all of the simulations. You will investigate the distribution of averages of 40 exponentials. Note that you will need to do a thousand simulations.
Illustrate via simulation and associated explanatory text the properties of the distribution of the mean of 40 exponentials.
```{r}
opts_chunk$set(echo = TRUE, results = 'hold')
```
#1. Show the sample mean and compare it to the theoretical (expected) mean of the distribution.
##CREATE SIMULATION WITH 40 SAMPLES AND 1000 NUM OF SIMULATIONS
```{r}
#Set the constants
set.seed(30) # Make simulation reproducible
lambda <- 0.2  # set for rex, the rate parameter
samples <- 40 #number of exponetials being distributed
sim <- 1000 # number of tests
sample_mean <- NULL
for (i in 1:sim) sample_mean <- c(sample_mean, mean(rexp(samples, lambda))) #sample
#Where exponential dist is simulated with rexp(n,lambda) the rate parameter
#HISTO THE SAMPLE MEAN TO SHOW THAT ITS A NORMAL DIST LIKE THE EXAMPLE
hist(sample_mean, freq=FALSE)
```
##Compare Sample Mean vs Theoritical Mean
##Sample Mean
```{r}
mean_of_means<- round(mean(sample_mean))
```
##Theoretical Mean - expected mean mu of expoential distribution rate lambda given = .20
```{r}
mu <- 1/lambda
mu
```
results: The sample mean and expected mean are closely related.
#2. Show how variable the sample is (via variance) and compare it to the theoretical variance of the distribution.
##Compare Sample Variance vs Theoretical Variance
##Sample Variance
```{r}
#var() function to get sample variance
variance_sample<-var(sample_mean)
variance_sample
```
##Expected Standard Deviation of a exponential distribution of rate parameter lambda
variance = sd ^ 2
```{r}
sd <- 1/lambda/sqrt(samples)
sd
```
##Theoretical Variance of Distribution
```{r}
variance_theoretical<- sd^2
variance_theoretical
```
#3. Show that the distribution is approximately normal.,
```{r echo=FALSE}
#Note that histograms are strongly affected by the number of bins used
normal_curve_hist <- hist(sample_mean, breaks=30, col = "red")
#Add a normal curve
xfit <- seq(min(sample_mean), max(sample_mean), length = 40) #dictates
yfit <- dnorm(xfit, mean = mean(sample_mean), sd = sd(sample_mean))
yfit <- yfit  * diff(h$mids[1:2]) * length(sample_mean)
lines(xfit, yfit, lwd=3)
```
---
title: "PA1_StatisticalInference"
author: "Rafael Mendez"
date: "August 19, 2015"
output: pdf_document
---
Purpose:
In this project you will investigate the exponential distribution in R and compare it with the Central Limit Theorem. The exponential distribution can be simulated in R with rexp(n, lambda) where lambda is the rate parameter. The mean of exponential distribution is 1/lambda and the standard deviation is also 1/lambda. Set lambda = 0.2 for all of the simulations. You will investigate the distribution of averages of 40 exponentials. Note that you will need to do a thousand simulations.
Illustrate via simulation and associated explanatory text the properties of the distribution of the mean of 40 exponentials.
```{r}
opts_chunk$set(echo = TRUE, results = 'hold')
```
#1. Show the sample mean and compare it to the theoretical (expected) mean of the distribution.
##CREATE SIMULATION WITH 40 SAMPLES AND 1000 NUM OF SIMULATIONS
```{r}
#Set the constants
set.seed(50) # Make simulation reproducible
lambda <- 0.2  # set for rex, the rate parameter
samples <- 40 #number of exponetials being distributed
sim <- 1000 # number of tests
sample_mean <- NULL
for (i in 1:sim) sample_mean <- c(sample_mean, mean(rexp(samples, lambda))) #sample
#Where exponential dist is simulated with rexp(n,lambda) the rate parameter
#HISTO THE SAMPLE MEAN TO SHOW THAT ITS A NORMAL DIST LIKE THE EXAMPLE
hist(sample_mean, freq=FALSE)
```
##Compare Sample Mean vs Theoritical Mean
##Sample Mean
```{r}
mean_of_means<- round(mean(sample_mean))
```
##Theoretical Mean - expected mean mu of expoential distribution rate lambda given = .20
```{r}
mu <- 1/lambda
mu
```
results: The sample mean and expected mean are closely related.
#2. Show how variable the sample is (via variance) and compare it to the theoretical variance of the distribution.
##Compare Sample Variance vs Theoretical Variance
##Sample Variance
```{r}
#var() function to get sample variance
variance_sample<-var(sample_mean)
variance_sample
```
##Expected Standard Deviation of a exponential distribution of rate parameter lambda
variance = sd ^ 2
```{r}
sd <- 1/lambda/sqrt(samples)
sd
```
##Theoretical Variance of Distribution
```{r}
variance_theoretical<- sd^2
variance_theoretical
```
#3. Show that the distribution is approximately normal.,
```{r echo=FALSE}
#Note that histograms are strongly affected by the number of bins used
normal_curve_hist <- hist(sample_mean, breaks=30, col = "red")
#Add a normal curve
xfit <- seq(min(sample_mean), max(sample_mean), length = 40) #dictates
yfit <- dnorm(xfit, mean = mean(sample_mean), sd = sd(sample_mean))
yfit <- yfit  * diff(h$mids[1:2]) * length(sample_mean)
lines(xfit, yfit, lwd=3)
```
library(knitr)
opts_chunk$set(echo = TRUE, results = 'hold')
```{r}
#Set the constants
set.seed(50) # Make simulation reproducible
lambda <- 0.2  # set for rex, the rate parameter
samples <- 40 #number of exponetials being distributed
sim <- 1000 # number of tests
sample_mean <- NULL
for (i in 1:sim) sample_mean <- c(sample_mean, mean(rexp(samples, lambda))) #sample
#Where exponential dist is simulated with rexp(n,lambda) the rate parameter
#HISTO THE SAMPLE MEAN TO SHOW THAT ITS A NORMAL DIST LIKE THE EXAMPLE
hist(sample_mean, freq=FALSE)
```
#Note that histograms are strongly affected by the number of bins used
normal_curve_hist <- hist(sample_mean, breaks=30, col = "red")
#Add a normal curve
xfit <- seq(min(sample_mean), max(sample_mean), length = 40) #dictates
yfit <- dnorm(xfit, mean = mean(sample_mean), sd = sd(sample_mean))
yfit <- yfit  * diff(h$mids[1:2]) * length(sample_mean)
lines(density(sample_mean, adjust=2), lty="dotted", col="darkgreen", lwd=2)
lines(xfit, yfit, lwd=3)
```
---
title: "PA1_StatisticalInference"
author: "Rafael Mendez"
date: "August 19, 2015"
output: pdf_document
---
Purpose:
In this project you will investigate the exponential distribution in R and compare it with the Central Limit Theorem. The exponential distribution can be simulated in R with rexp(n, lambda) where lambda is the rate parameter. The mean of exponential distribution is 1/lambda and the standard deviation is also 1/lambda. Set lambda = 0.2 for all of the simulations. You will investigate the distribution of averages of 40 exponentials. Note that you will need to do a thousand simulations.
Illustrate via simulation and associated explanatory text the properties of the distribution of the mean of 40 exponentials.
Load in Global Knitr Parameters
```{r}
library(knitr)
opts_chunk$set(echo = TRUE, results = 'hold')
```
#1. Show the sample mean and compare it to the theoretical (expected) mean of the distribution.
##Create Simulation with 40 samples and 1000 num of simulations
```{r}
#Set the constants
set.seed(50) # Make simulation reproducible
lambda <- 0.2  # set for rex, the rate parameter
samples <- 40 #number of exponetials being distributed
sim <- 1000 # number of tests
sample_mean <- NULL
for (i in 1:sim) sample_mean <- c(sample_mean, mean(rexp(samples, lambda)))
```
##Compare Sample Mean vs Theoritical Mean
##Report the Sample Mean
```{r}
mean_of_means<- round(mean(sample_mean))
mean_of_means
```
##Report the Theoretical Mean - expected mean mu of expoential distribution rate lambda given = .20
```{r}
mu <- 1/lambda
mu
```
results: The sample mean and expected mean are closely related.
#2. Show how variable the sample is (via variance) and compare it to the theoretical variance of the distribution.
##Compare Sample Variance vs Theoretical Variance
##Report the Sample Variance
```{r}
#var() function to get sample variance
variance_sample<-var(sample_mean)
variance_sample
```
##Calculate the Expected Standard Deviation of a exponential distribution of rate parameter lambda
As variance = sd ^ 2
```{r}
sd <- 1/lambda/sqrt(samples)
sd
```
##Report the Theoretical Variance of Distribution
```{r}
variance_theoretical<- sd^2
variance_theoretical
```
#3. Show that the distribution is approximately normal.
We use a histogram
```{r echo=FALSE}
#Note that histograms are strongly affected by the number of bins used
normal_curve_hist <- hist(sample_mean, breaks=30, col = "red")
#Add a normal curve
xfit <- seq(min(sample_mean), max(sample_mean), length = 40) #dictates
yfit <- dnorm(xfit, mean = mean(sample_mean), sd = sd(sample_mean))
yfit <- yfit  * diff(normal_curve_hist$mids[1:2]) * length(sample_mean)
lines(xfit, yfit, lwd=3)
```
normal_curve_hist <- hist(sample_mean, breaks=30, col = "red")
#Add a normal curve
xfit <- seq(min(sample_mean), max(sample_mean), length = 40) #dictates
yfit <- dnorm(xfit, mean = mean(sample_mean), sd = sd(sample_mean))
yfit <- yfit  * diff(normal_curve_hist$mids[1:2]) * length(sample_mean)
color.density(yfit)
lines(xfit, yfit, lwd=3)
install.packages("lessR")
library(lessR)
```{r echo=FALSE}
#Note that histograms are strongly affected by the number of bins used
normal_curve_hist <- hist(sample_mean, breaks=30, col = "red")
#Add a normal curve
xfit <- seq(min(sample_mean), max(sample_mean), length = 40) #dictates
yfit <- dnorm(xfit, mean = mean(sample_mean), sd = sd(sample_mean))
yfit <- yfit  * diff(normal_curve_hist$mids[1:2]) * length(sample_mean)
color.density(yfit)
lines(xfit, yfit, lwd=3)
```
?color.density
```{r echo=false}
ggplot(data = sample_mean, aes(x = means)) +
geom_histogram(binwidth=0.1, aes(y=..density..), alpha=0.2) +
stat_function(fun = dnorm, arg = list(mean = mu , sd = sd), colour = "red", size=1) +
geom_vline(xintercept = mu, size=1, colour="#CC0000") +
geom_density(colour="blue", size=1) +
geom_vline(xintercept = means_of_mean, size=1, colour="#0000CC") +
scale_x_continuous(breaks=seq(mu-3,mu+3,1), limits=c(mu-3,mu+3))
```
library(ggplot2)
```{r echo=false}
ggplot(data = sample_mean, aes(x = means)) +
geom_histogram(binwidth=0.1, aes(y=..density..), alpha=0.2) +
stat_function(fun = dnorm, arg = list(mean = mu , sd = sd), colour = "red", size=1) +
geom_vline(xintercept = mu, size=1, colour="#CC0000") +
geom_density(colour="blue", size=1) +
geom_vline(xintercept = means_of_mean, size=1, colour="#0000CC") +
scale_x_continuous(breaks=seq(mu-3,mu+3,1), limits=c(mu-3,mu+3))
```
setwd("~/master/Statistical_Inference")
setwd("~/master/Statistical_Inference")
